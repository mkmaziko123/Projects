from IPython.display import HTML, display
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

stock_mu = 0.1
stock_sigma = 0.2
trialNum = 1000


def endportvalue(intialPortValue =  1000,riskFreeReturn = 0.03,stockWeight = 0.4):
    stockReturn = np.random.normal(stock_mu, stock_sigma)
    portfolioReturn = (stockReturn * stockWeight) + (riskFreeReturn * (1-stockWeight))
    finalPortValue = intialPortValue*(1+portfolioReturn)
    return finalPortValue

outputs = [endportvalue() for i in range(trialNum)]


def createDf(outputs):
    df = pd.DataFrame()
    df['Portfolio End Values'] = outputs
    return df

def plotSim(df):
    df.plot.hist(bins = 100)
    plt.show()

def prob(df):
    percentiles = [i/20 for i in range(1, 20)]
    return df['Portfolio End Values'].quantile(percentiles)

def GoalReturn(df, targetReturn = 1250):
   return ( df['Portfolio End Values'] >= targetReturn ).astype(int).mean()

def MonteOutputs(outputs,targetReturn):
    df = createDf(outputs)
    ProbTable = prob(df)
    GoalProb = GoalReturn(df, targetReturn = targetReturn )
    return ProbTable, GoalProb

def displayMonte(outputs, targetReturn = 1250):
    Probtable, GoalProb = MonteOutputs(outputs, targetReturn = targetReturn)
    print('Probability Table')
    print(Probtable.apply(lambda x: f'${x:.2f}'))
    print('')
    print(f'Probability of getting ${targetReturn:,.0f} in cash: {GoalProb:.1%}')
    print('')

def display_header(header):
    return display(HTML(f'<h2>{header}</h2>'))

display_header("Monte Carlo Sim")

displayMonte(outputs)
endportvalue()

